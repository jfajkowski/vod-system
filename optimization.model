param lambda, integer, > 0;
/* requests per hour */

param delta, > 0;
/* cost of storing 1 gigabyte for 1 hour */

param gamma, > 0;
/* cost of transcoding 1 content for 1 hour */

param v, integer, > 0; 
/* number of videos */

set V := 1..v; 
/* set of videos */

param p{i in V}, >= 0, <= 1;
/* popularity distribution */

param s{i in V}, > 0;
/* video sizes in gigabytes */

param d{i in V}, > 0;
/* video durations in hours */

var x{i in V}, binary; 
/* x[i] = 1 means that video i will be transcoded */

param e, > 0;
/* max number of transcoding nodes */

set E := 1..e;
/* set of numbers of transcoding nodes */

var t, integer;
/* number of transcoding nodes */

param zeta{j in E}, >= 0;
/* erlang table values for chosen availability */

param xi{j in E}, >= 0;
/* numbers of transcoding nodes */

var epsilon{j in E}, binary;
/* epsilon[i] = 1 means that i will be the number of transcoding nodes */

s.t. one{i in V}: sum{j in E} epsilon[j] = 1;
/* only one row number of transcoding nodes can be chosen */

s.t. selectzeta: sum{j in E} epsilon[j]*zeta[j] >= sum{i in V} lambda*p[i]*x[i]*d[i];    
/* select fulfilling row */

s.t. selectt{i in V}: sum{j in E} epsilon[j]*xi[j] = t;

minimize obj: sum{i in V} delta*(1-x[i])*s[i] + gamma * t;

solve;
display x;
display t;
display obj;
data;

param lambda := 100;
param delta := 3.527e-5;
param gamma := 4.34e-3;
param v := 15;
param p :=
1 0.1625,
2 0.0125,
3 0.0125,
4 0.0125,
5 0.4375,
6 0.0125,
7 0.025,
8 0.0375,
9 0.075,
10 0.0125,
11 0.0125,
12 0.075,
13 0.075,
14 0.0125,
15 0.025;
param s :=
1 0.550148,
2 0.548851,
3 0.684559,
4 0.725357,
5 0.473083,
6 0.579525,
7 0.642513,
8 0.648129,
9 0.541477,
10 0.639694,
11 0.609741,
12 0.617378,
13 0.559715,
14 0.623161,
15 0.602493;
param d :=
1 0.0358692,
2 0.0379546,
3 0.0439791,
4 0.0471188,
5 0.0305977,
6 0.0392175,
7 0.0417663,
8 0.0425541,
9 0.0346295,
10 0.0419516,
11 0.0405382,
12 0.0420096,
13 0.0384606,
14 0.0414882,
15 0.0410827;

param e := 10;
param zeta :=
1 0.000,
2 0.010,
3 0.153,
4 0.455,
5 0.869,
6 1.360,
7 1.910,
8 2.500,
9 3.130,
10 3.780;
param xi :=
1 0,
2 1,
3 2,
4 3,
5 4,
6 5,
7 6,
8 7,
9 8,
10 9;

end;
